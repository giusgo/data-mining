---
import "../styles/globals.css";

interface Props {
    title: string;
}

const { title } = Astro.props;
---

<script is:inline>
    const getThemePreference = () => {
        if (
            typeof localStorage !== "undefined" &&
            localStorage.getItem("theme")
        ) {
            return localStorage.getItem("theme");
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "light";
    };
    const isDark = getThemePreference() === "dark";
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");

    if (typeof localStorage !== "undefined") {
        const observer = new MutationObserver(() => {
            const isDark = document.documentElement.classList.contains("dark");
            localStorage.setItem("theme", isDark ? "dark" : "light");
        });
        observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ["class"],
        });
    }
</script>

<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="description" content="Data Mining course project" />
        <meta name="viewport" content="width=device-width" />
        <link rel="icon" type="image/svg+xml" href="/data-mining/favicon.svg" />
        <meta name="generator" content={Astro.generator} />
        <title>{title}</title>
        <link
            href="https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&family=Lexend:wght@100..900&display=swap"
            rel="stylesheet"
        />
    </head>
    <body class="flex flex-col min-h-screen">
        <slot />
    </body>
</html>
<style is:global>
    body {
        font-family: "IBM Plex Mono", monospace;
    }
</style>
